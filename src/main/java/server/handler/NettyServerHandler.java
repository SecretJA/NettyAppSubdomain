package server.handler;

import io.netty.channel.*;
import server.gui.GuiServer;
import com.fasterxml.jackson.databind.ObjectMapper;
import server.model.MessageRequest;
import server.model.MessageResponse;
import server.crypto.CryptoUtils;
import server.scanner.SubdomainScanner;
import server.utils.KeyIvDatabase;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.SecretKey;
import java.util.Base64;
import java.security.PublicKey;
import java.security.KeyFactory;
import java.security.spec.X509EncodedKeySpec;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import server.network.NettyServer;
import java.security.PrivateKey;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;

/**
 * X·ª≠ l√Ω message ƒë·∫øn/ƒëi cho Netty server, c·∫≠p nh·∫≠t log GUI.
 */
public class NettyServerHandler extends SimpleChannelInboundHandler<String> {
    private final GuiServer gui;
    private final NettyServer nettyServer;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
    private PublicKey lastClientPublicKey;

    public NettyServerHandler(GuiServer gui, NettyServer nettyServer) {
        this.gui = gui;
        this.nettyServer = nettyServer;
    }

    @Override
    protected void channelRead0(ChannelHandlerContext ctx, String msg) {
        try {
            // Ki·ªÉm tra n·∫øu message l√† hybrid encryption (JSON c√≥ encryptedKey, encryptedIv, encryptedData)
            if (msg.trim().startsWith("{")) {
                com.fasterxml.jackson.databind.ObjectMapper mapper = new com.fasterxml.jackson.databind.ObjectMapper();
                com.fasterxml.jackson.databind.JsonNode node = mapper.readTree(msg);
                if (node.has("encryptedKey") && node.has("encryptedIv") && node.has("encryptedData")) {
                    gui.updateLog("üîì Nh·∫≠n payload hybrid encryption, ƒëang gi·∫£i m√£ b·∫±ng private key server...");
                    String encryptedKey = node.get("encryptedKey").asText();
                    String encryptedIv = node.get("encryptedIv").asText();
                    String encryptedData = node.get("encryptedData").asText();
                    java.security.PrivateKey privKey = nettyServer.getPrivateKey();
                    if (privKey == null) throw new Exception("Server ch∆∞a c√≥ private key!");
                    javax.crypto.Cipher rsaCipher = javax.crypto.Cipher.getInstance("RSA");
                    rsaCipher.init(javax.crypto.Cipher.DECRYPT_MODE, privKey);
                    byte[] aesKeyBytes = rsaCipher.doFinal(java.util.Base64.getDecoder().decode(encryptedKey));
                    byte[] iv = rsaCipher.doFinal(java.util.Base64.getDecoder().decode(encryptedIv));
                    javax.crypto.SecretKey aesKey = new javax.crypto.spec.SecretKeySpec(aesKeyBytes, 0, aesKeyBytes.length, "AES");
                    javax.crypto.Cipher aesCipher = javax.crypto.Cipher.getInstance("AES/CBC/PKCS5Padding");
                    aesCipher.init(javax.crypto.Cipher.DECRYPT_MODE, aesKey, new javax.crypto.spec.IvParameterSpec(iv));
                    byte[] decrypted = aesCipher.doFinal(java.util.Base64.getDecoder().decode(encryptedData));
                    msg = new String(decrypted);
                    gui.updateLog("üîì ƒê√£ gi·∫£i m√£ th√†nh c√¥ng payload hybrid encryption!");
                }
            }
            gui.updateLog("üì® Nh·∫≠n tin nh·∫Øn t·ª´ client: " + ctx.channel().remoteAddress());

            // Parse JSON th√†nh MessageRequest
            ObjectMapper mapper = new ObjectMapper();
            MessageRequest req = mapper.readValue(msg, MessageRequest.class);

            // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ tin nh·∫Øn
            StringBuilder details = new StringBuilder();
            details.append("=== CHI TI·∫æT TIN NH·∫ÆN NH·∫¨N ƒê∆Ø·ª¢C ===\n\n");
            details.append("Th·ªùi gian: ").append(dateFormat.format(new Date())).append("\n");
            details.append("Client: ").append(ctx.channel().remoteAddress()).append("\n\n");

            details.append("üìù N·ªôi dung tin nh·∫Øn:\n");
            details.append("Raw Message: ").append(req.rawMessage).append("\n\n");

            details.append("üîë Th√¥ng tin Key:\n");
            details.append("Public Key (Base64): ").append(req.publicKeyAes.substring(0, Math.min(50, req.publicKeyAes.length()))).append("...\n");
            details.append("AES Key (Base64): ").append(req.aesKey.substring(0, Math.min(30, req.aesKey.length()))).append("...\n");
            details.append("AES IV (Base64): ").append(req.aesIv.substring(0, Math.min(30, req.aesIv.length()))).append("...\n\n");

            details.append("‚úçÔ∏è Th√¥ng tin ch·ªØ k√Ω:\n");
            details.append("Signature (Base64): ").append(req.signature.substring(0, Math.min(50, req.signature.length()))).append("...\n");
            details.append("Signature Length: ").append(req.signature.length()).append(" characters\n\n");

            // Gi·∫£i m√£ AES key/iv
            byte[] keyBytes = Base64.getDecoder().decode(req.aesKey);
            byte[] ivBytes = Base64.getDecoder().decode(req.aesIv);
            SecretKey aesKey = new SecretKeySpec(keyBytes, 0, keyBytes.length, "AES");

            details.append("üîì Th√¥ng tin gi·∫£i m√£:\n");
            details.append("AES Key Length: ").append(keyBytes.length).append(" bytes\n");
            details.append("AES IV Length: ").append(ivBytes.length).append(" bytes\n");
            details.append("AES Algorithm: ").append(aesKey.getAlgorithm()).append("\n\n");

            // Gi·∫£i m√£ public key t·ª´ AES
            byte[] encryptedPubKeyBytes = Base64.getDecoder().decode(req.publicKeyAes);
            byte[] pubKeyBytes = CryptoUtils.decryptWithAES(encryptedPubKeyBytes, aesKey, ivBytes);
            X509EncodedKeySpec keySpec = new X509EncodedKeySpec(pubKeyBytes);
            PublicKey publicKey = KeyFactory.getInstance("RSA").generatePublic(keySpec);
            // Lu√¥n d√πng public key n√†y ƒë·ªÉ m√£ h√≥a response
            lastClientPublicKey = publicKey;

            details.append("üîê Th√¥ng tin Public Key:\n");
            details.append("Algorithm: ").append(publicKey.getAlgorithm()).append("\n");
            details.append("Format: ").append(publicKey.getFormat()).append("\n");
            details.append("Length: ").append(publicKey.getEncoded().length).append(" bytes\n\n");

            // X√°c th·ª±c ch·ªØ k√Ω
            boolean verified = CryptoUtils.verify(req.rawMessage, req.signature, publicKey);

            details.append("‚úÖ K·∫øt qu·∫£ x√°c th·ª±c:\n");
            details.append("Signature Verified: ").append(verified ? "‚úÖ H·ª¢P L·ªÜ" : "‚ùå KH√îNG H·ª¢P L·ªÜ").append("\n\n");

            if (verified) {
                gui.updateLog("[DEBUG] X√°c th·ª±c ch·ªØ k√Ω th√†nh c√¥ng, b·∫Øt ƒë·∫ßu x·ª≠ l√Ω scan domain.");
                details.append("üîÑ X·ª≠ l√Ω ti·∫øp theo:\n");
                details.append("- L∆∞u key/iv v√†o database\n");
                details.append("- Th·ª±c hi·ªán scan subdomain\n");
                details.append("- G·ª≠i k·∫øt qu·∫£ v·ªÅ client\n");
                try {
                    // L∆∞u key/iv v√†o database (ch·ªâ l∆∞u AES key v√† IV, kh√¥ng l∆∞u public key)
                    String clientIp = ctx.channel().remoteAddress().toString();
                    KeyIvDatabase.save(new server.model.KeyIvRecord(req.aesKey, req.aesIv, req.targetDomain, clientIp));
                    
                    // Ki·ªÉm tra v√† cleanup database n·∫øu c·∫ßn
                    checkAndCleanupDatabase();
                    
                    // Th·ª±c hi·ªán scan subdomain
                    StringBuilder result = new StringBuilder();
                    // L·∫•y domain c·∫ßn scan t·ª´ request
                    String targetDomain = req.getTargetDomain() != null && !req.getTargetDomain().isEmpty() ? req.getTargetDomain() : "huflit.edu.vn";
                    gui.updateLog("üîç ƒêang scan subdomain cho domain: " + targetDomain);
                    // S·ª≠ d·ª•ng scan DNS v·ªõi domain ƒë·ªông
                    SubdomainScanner.ScanResult scanResult = SubdomainScanner.scanDNSWithStats("src/main/resources/subdomains-top1million-110000.txt", targetDomain);
                    if (scanResult.totalScanned == 0) {
                        // Fallback v·ªÅ wordlist c≈© n·∫øu file l·ªõn kh√¥ng c√≥
                        gui.updateLog("[DEBUG] File subdomains-top1million-110000.txt kh√¥ng c√≥ ho·∫∑c kh√¥ng t√¨m th·∫•y, fallback sang wordlist.txt");
                        scanResult = SubdomainScanner.scanDNSWithStats("src/main/resources/wordlist.txt");
                    }
                    gui.updateLog("[DEBUG] Scan xong, t·ªïng domain ƒë√£ scan: " + scanResult.totalScanned + ", t√¨m th·∫•y: " + scanResult.totalFound);
                    // T·∫°o k·∫øt qu·∫£ chi ti·∫øt
                    for (String domain : scanResult.foundDomains) {
                        result.append(domain).append("\n");
                    }
                    // G·ª≠i k·∫øt qu·∫£ chi ti·∫øt v·ªÅ client (CHIA NH·ªé n·∫øu qu√° nhi·ªÅu domain)
                    int batchSize = 10; // Gi·∫£m batch nh·ªè ƒë·ªÉ tr√°nh c·∫Øt d√≤ng
                    List<String> allDomains = scanResult.foundDomains;
                    int totalScanned = scanResult.totalScanned;
                    int totalFound = scanResult.totalFound;
                    for (int i = 0; i < allDomains.size(); i += batchSize) {
                        List<String> batch = allDomains.subList(i, Math.min(i + batchSize, allDomains.size()));
                        StringBuilder batchResult = new StringBuilder();
                        for (String domain : batch) {
                            batchResult.append(domain).append("\n");
                        }
                        MessageResponse resp = new MessageResponse(
                                "OK",
                                batchResult.toString(),
                                batch,
                                totalScanned,
                                totalFound
                        );
                        resp.totalNotFound = scanResult.getTotalNotFound();
                        resp.setTargetDomain(targetDomain);
                        gui.updateLog("[DEBUG] G·ª≠i batch: " + batch.size() + "/" + allDomains.size() + " domain");
                        sendEncryptedResponse(ctx, resp, publicKey); // d√πng publicKey v·ª´a nh·∫≠n
                        ctx.flush();
                    }
                    // N·∫øu kh√¥ng c√≥ domain n√†o, v·∫´n g·ª≠i 1 response r·ªóng
                    if (allDomains.isEmpty()) {
                        MessageResponse resp = new MessageResponse(
                                "OK",
                                "",
                                new java.util.ArrayList<>(),
                                totalScanned,
                                totalFound
                        );
                        resp.totalNotFound = scanResult.getTotalNotFound();
                        resp.setTargetDomain(targetDomain);
                        sendEncryptedResponse(ctx, resp, publicKey); // d√πng publicKey v·ª´a nh·∫≠n
                        ctx.flush();
                    }
                    // Hi·ªÉn th·ªã domain l√™n GUI
                    gui.updateScanDomains(scanResult.foundDomains);
                    gui.updateLog("‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng v√† g·ª≠i k·∫øt qu·∫£ v·ªÅ client");
                    details.append("\nüì§ K·∫øt qu·∫£ g·ª≠i v·ªÅ:\n");
                    details.append("Status: OK\n");
                    details.append("Total Scanned: ").append(scanResult.totalScanned).append("\n");
                    details.append("Total Found: ").append(scanResult.totalFound).append("\n");
                    details.append("Total Not Found: ").append(scanResult.getTotalNotFound()).append("\n");
                    details.append("Found Domains: ").append(scanResult.foundDomains.size()).append("\n");
                } catch (Exception scanEx) {
                    gui.updateLog("‚ùå L·ªói khi scan ho·∫∑c g·ª≠i domain: " + scanEx.getMessage());
                    java.io.StringWriter sw = new java.io.StringWriter();
                    scanEx.printStackTrace(new java.io.PrintWriter(sw));
                    gui.updateLog("[STACKTRACE] " + sw.toString());
                }
            } else {
                // Tr·∫£ v·ªÅ l·ªói x√°c th·ª±c
                MessageResponse resp = new MessageResponse("VERIFICATION_FAILED", "Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá");
                sendEncryptedResponse(ctx, resp, publicKey); // d√πng publicKey v·ª´a nh·∫≠n
                gui.updateLog("‚ùå Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá - t·ª´ ch·ªëi tin nh·∫Øn");
                details.append("\n‚ùå K·∫øt qu·∫£:\n");
                details.append("Status: VERIFICATION_FAILED\n");
                details.append("Reason: Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá\n");
            }

            // Hi·ªÉn th·ªã chi ti·∫øt trong GUI
            gui.updateMessageDetails(details.toString());

        } catch (Exception e) {
            gui.updateLog("‚ùå L·ªói x·ª≠ l√Ω: " + e.getMessage());
            try {
                java.io.StringWriter sw = new java.io.StringWriter();
                e.printStackTrace(new java.io.PrintWriter(sw));
                gui.updateLog("[STACKTRACE] " + sw.toString());
                ObjectMapper mapper = new ObjectMapper();
                MessageResponse resp = new MessageResponse("VERIFICATION_FAILED", "L·ªói x·ª≠ l√Ω: " + e.getMessage());
                // N·∫øu c√≥ public key client, m√£ h√≥a response
                if (lastClientPublicKey != null) {
                    javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance("RSA");
                    cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, lastClientPublicKey);
                    byte[] encrypted = cipher.doFinal(mapper.writeValueAsString(resp).getBytes());
                    String base64 = java.util.Base64.getEncoder().encodeToString(encrypted);
                    ctx.writeAndFlush("ENCRYPTED:" + base64);
                } else {
                    ctx.writeAndFlush(mapper.writeValueAsString(resp));
                }
            } catch (Exception ignored) {
            }
        }
    }

    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
        gui.updateLog("‚ùå L·ªói k·∫øt n·ªëi: " + cause.getMessage());
        ctx.close();
    }

    @Override
    public void channelActive(ChannelHandlerContext ctx) {
        gui.updateLog("üîó Client k·∫øt n·ªëi: " + ctx.channel().remoteAddress());
        // G·ª≠i public key cho client
        try {
            PublicKey pubKey = nettyServer.getPublicKey();
            if (pubKey != null) {
                String base64PubKey = java.util.Base64.getEncoder().encodeToString(pubKey.getEncoded());
                ctx.writeAndFlush("PUBLIC_KEY:" + base64PubKey + "\n");
                gui.updateLog("üì§ ƒê√£ g·ª≠i public key cho client");
            } else {
                gui.updateLog("‚ö†Ô∏è Ch∆∞a c√≥ public key ƒë·ªÉ g·ª≠i cho client!");
            }
        } catch (Exception e) {
            gui.updateLog("‚ùå L·ªói g·ª≠i public key: " + e.getMessage());
        }
    }

    @Override
    public void channelInactive(ChannelHandlerContext ctx) {
        gui.updateLog("üîå Client ng·∫Øt k·∫øt n·ªëi: " + ctx.channel().remoteAddress());
    }

    // Trong NettyServerHandler.java, s·ª≠a ph∆∞∆°ng th·ª©c sendEncryptedResponse:

    private void checkAndCleanupDatabase() {
        int recordCount = KeyIvDatabase.getRecordCount();
        long dbSize = KeyIvDatabase.getDatabaseSize();
        
        // Cleanup n·∫øu qu√° nhi·ªÅu records ho·∫∑c file qu√° l·ªõn
        if (recordCount > 5000 || dbSize > 50 * 1024 * 1024) { // 50MB
            gui.updateLog("üßπ Database qu√° l·ªõn, th·ª±c hi·ªán cleanup...");
            KeyIvDatabase.cleanupOldRecords(30); // X√≥a records c≈© h∆°n 30 ng√†y
            
            int newCount = KeyIvDatabase.getRecordCount();
            long newSize = KeyIvDatabase.getDatabaseSize();
            gui.updateLog("‚úÖ Cleanup xong: " + newCount + " records, " + (newSize/1024/1024) + " MB");
        }
    }

    private void sendEncryptedResponse(ChannelHandlerContext ctx, Object responseObj, PublicKey clientPublicKey) throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        String json = mapper.writeValueAsString(responseObj);

        // Sinh AES key/iv
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(128);
        SecretKey aesKey = keyGen.generateKey();
        byte[] iv = new byte[16];
        new java.security.SecureRandom().nextBytes(iv);

        // M√£ h√≥a d·ªØ li·ªáu b·∫±ng AES
        Cipher aesCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        aesCipher.init(Cipher.ENCRYPT_MODE, aesKey, new IvParameterSpec(iv));
        byte[] encryptedData = aesCipher.doFinal(json.getBytes());

        // M√£ h√≥a AES key/iv b·∫±ng RSA
        Cipher rsaCipher = Cipher.getInstance("RSA");
        rsaCipher.init(Cipher.ENCRYPT_MODE, clientPublicKey);
        byte[] encryptedKey = rsaCipher.doFinal(aesKey.getEncoded());
        byte[] encryptedIv = rsaCipher.doFinal(iv);

        // T·∫°o response object
        String b64Key = java.util.Base64.getEncoder().encodeToString(encryptedKey);
        String b64Iv = java.util.Base64.getEncoder().encodeToString(encryptedIv);
        String b64Data = java.util.Base64.getEncoder().encodeToString(encryptedData);

        // Log chi ti·∫øt
        gui.updateLog("[DEBUG] G·ª≠i response: encryptedKey=" + b64Key.substring(0, Math.min(60, b64Key.length())) + "...");
        gui.updateLog("[DEBUG] G·ª≠i response: encryptedIv=" + b64Iv.substring(0, Math.min(60, b64Iv.length())) + "...");
        gui.updateLog("[DEBUG] G·ª≠i response: encryptedData=" + b64Data.substring(0, Math.min(60, b64Data.length())) + "...");

        // T·∫°o JSON payload
        java.util.Map<String, String> payloadMap = new java.util.HashMap<>();
        payloadMap.put("encryptedKey", b64Key);
        payloadMap.put("encryptedIv", b64Iv);
        payloadMap.put("encryptedData", b64Data);

        String payload = mapper.writeValueAsString(payloadMap);

        // G·ª≠i v·ªõi format r√µ r√†ng
        String messageToSend = payload + "\n---END---\n";

        gui.updateLog("[DEBUG] ƒê·ªô d√†i payload: " + payload.length() + " chars");
        gui.updateLog("[DEBUG] Message g·ª≠i: " + messageToSend.length() + " chars total");

        ctx.write(messageToSend);
        ctx.flush();
    }
}