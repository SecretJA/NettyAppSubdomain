package client.network;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.*;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.codec.LineBasedFrameDecoder;
import io.netty.handler.codec.string.StringDecoder;
import io.netty.handler.codec.string.StringEncoder;
import client.gui.GuiClient;
import client.crypto.CryptoUtils;
import client.model.MessageRequest;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
import javax.crypto.SecretKey;
import java.security.PrivateKey;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import io.netty.channel.ChannelOption;
import java.util.ArrayList;
import java.security.PublicKey;
import io.netty.handler.codec.DelimiterBasedFrameDecoder;
import io.netty.buffer.Unpooled;

/**
 * Qu·∫£n l√Ω k·∫øt n·ªëi Netty client, c·∫•u h√¨nh pipeline v√† handler.
 */
public class NettyClient {
    private final GuiClient gui;
    private Channel channel;
    private EventLoopGroup group;
    private volatile boolean isConnected = false;
    private String currentHost;
    private int currentPort;
    private PublicKey serverPublicKey;

    public NettyClient(GuiClient gui) {
        this.gui = gui;
    }

    public void connect(String host, int port) {
        // N·∫øu ƒë√£ k·∫øt n·ªëi, ng·∫Øt k·∫øt n·ªëi c≈© tr∆∞·ªõc
        if (isConnected && channel != null) {
            disconnect();
        }

        this.currentHost = host;
        this.currentPort = port;

        group = new NioEventLoopGroup();
        try {
            gui.updateLog("üîó ƒêang k·∫øt n·ªëi ƒë·∫øn server " + host + ":" + port + "...");
            gui.setConnectionStatus(false);

            Bootstrap b = new Bootstrap();
            b.group(group)
                    .channel(NioSocketChannel.class)
                    .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 10000) // 10 gi√¢y timeout
                    .option(ChannelOption.SO_KEEPALIVE, true) // Gi·ªØ k·∫øt n·ªëi
                    .handler(new ChannelInitializer<Channel>() {
                        // Trong ph·∫ßn initChannel c·ªßa NettyClient.java, thay th·∫ø handler pipeline:

                        @Override
                        protected void initChannel(Channel ch) {
                            // S·ª≠ d·ª•ng LineBasedFrameDecoder thay v√¨ DelimiterBasedFrameDecoder
                            ch.pipeline().addLast(
                                    new LineBasedFrameDecoder(65536), // T√°ch theo \n ho·∫∑c \r\n
                                    new StringDecoder(),
                                    new StringEncoder(),
                                    new SimpleChannelInboundHandler<String>() {
                                        // Buffer ƒë·ªÉ t√≠ch l≈©y JSON chunks
                                        private StringBuilder jsonBuffer = new StringBuilder();

                                        @Override
                                        protected void channelRead0(ChannelHandlerContext ctx, String msg) {
                                            try {
                                                String line = msg.trim();

                                                // B·ªè qua d√≤ng tr·ªëng
                                                if (line.isEmpty()) return;

                                                // X·ª≠ l√Ω public key
                                                if (line.startsWith("PUBLIC_KEY:")) {
                                                    String base64Key = line.substring("PUBLIC_KEY:".length()).trim();
                                                    serverPublicKey = client.crypto.CryptoUtils.loadPublicKeyFromBase64(base64Key);
                                                    gui.updateLog("üîë ƒê√£ nh·∫≠n public key t·ª´ server!");
                                                    gui.updateServerPublicKeyInfo(base64Key);
                                                    return;
                                                }

                                                // X·ª≠ l√Ω delimiter ---END---
                                                if (line.equals("---END---")) {
                                                    if (jsonBuffer.length() > 0) {
                                                        processCompleteJson(jsonBuffer.toString());
                                                        jsonBuffer.setLength(0); // Clear buffer
                                                    }
                                                    return;
                                                }

                                                // T√≠ch l≈©y JSON data
                                                if (line.startsWith("{")) {
                                                    // B·∫Øt ƒë·∫ßu JSON m·ªõi
                                                    jsonBuffer.setLength(0);
                                                    jsonBuffer.append(line);
                                                } else if (jsonBuffer.length() > 0) {
                                                    // Ti·∫øp t·ª•c JSON hi·ªán t·∫°i
                                                    jsonBuffer.append(line);
                                                }

                                                // Ki·ªÉm tra JSON ho√†n ch√¨nh (k·∫øt th√∫c b·∫±ng })
                                                if (jsonBuffer.length() > 0 && line.endsWith("}")) {
                                                    processCompleteJson(jsonBuffer.toString());
                                                    jsonBuffer.setLength(0);
                                                }

                                            } catch (Exception e) {
                                                gui.updateLog("‚ùå L·ªói x·ª≠ l√Ω response: " + e.getMessage());
                                                gui.updateLog("[DEBUG] Raw msg: " + msg);
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                e.printStackTrace(new java.io.PrintWriter(sw));
                                                gui.updateLog("[STACKTRACE] " + sw.toString());
                                            }
                                        }

                                        // Ph∆∞∆°ng th·ª©c x·ª≠ l√Ω JSON ho√†n ch·ªânh
                                        private void processCompleteJson(String jsonStr) {
                                            try {
                                                ObjectMapper mapper = new ObjectMapper();
                                                JsonNode node = mapper.readTree(jsonStr);

                                                // X·ª≠ l√Ω JSON m√£ h√≥a
                                                if (node.has("encryptedKey") && node.has("encryptedData") && node.has("encryptedIv")) {
                                                    String decryptedMsg = tryDecryptResponse(node);
                                                    if (decryptedMsg != null) {
                                                        gui.updateLog("üîì ƒê√£ gi·∫£i m√£ response t·ª´ server b·∫±ng AES+RSA!");
                                                        try {
                                                            client.model.MessageResponse response = mapper.readValue(decryptedMsg, client.model.MessageResponse.class);
                                                            gui.updateScanResult(
                                                                    response.getStatus(),
                                                                    response.getResult(),
                                                                    response.getFoundDomains(),
                                                                    response.getTotalScanned(),
                                                                    response.getTotalFound(),
                                                                    response.getTargetDomain()
                                                            );
                                                        } catch (Exception e) {
                                                            gui.updateLog("‚ùå L·ªói parse response (sau gi·∫£i m√£): " + e.getMessage());
                                                            gui.updateLog("[DEBUG] Raw decrypted: " + decryptedMsg);
                                                        }
                                                    }
                                                    return;
                                                }

                                                // X·ª≠ l√Ω JSON th∆∞·ªùng
                                                try {
                                                    client.model.MessageResponse response = mapper.readValue(jsonStr, client.model.MessageResponse.class);
                                                    gui.updateScanResult(
                                                            response.getStatus(),
                                                            response.getResult(),
                                                            response.getFoundDomains(),
                                                            response.getTotalScanned(),
                                                            response.getTotalFound(),
                                                            response.getTargetDomain()
                                                    );
                                                } catch (Exception e) {
                                                    gui.updateLog("üì® Nh·∫≠n response t·ª´ server: " + jsonStr.substring(0, Math.min(100, jsonStr.length())) + "...");
                                                }

                                            } catch (Exception e) {
                                                gui.updateLog("‚ùå L·ªói parse JSON ho√†n ch·ªânh: " + e.getMessage());
                                                gui.updateLog("[DEBUG] Complete JSON: " + jsonStr);
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                e.printStackTrace(new java.io.PrintWriter(sw));
                                                gui.updateLog("[STACKTRACE] " + sw.toString());
                                            }
                                        }

                                        @Override
                                        public void channelActive(ChannelHandlerContext ctx) {
                                            isConnected = true;
                                            channel = ctx.channel();
                                            gui.updateLog("‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn server!");
                                            gui.updateLog("üìç Server address: " + ctx.channel().remoteAddress());
                                            gui.setConnectionStatus(true);
                                        }

                                        @Override
                                        public void channelInactive(ChannelHandlerContext ctx) {
                                            isConnected = false;
                                            gui.updateLog("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi t·ª´ server");
                                            gui.updateLog("üìç Server address: " + ctx.channel().remoteAddress());
                                            gui.setConnectionStatus(false);
                                        }

                                        @Override
                                        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
                                            gui.updateLog("‚ùå L·ªói k·∫øt n·ªëi: " + cause.getMessage());
                                            isConnected = false;
                                            gui.setConnectionStatus(false);
                                            ctx.close();
                                        }
                                    }
                            );
                        }
                    });

            // K·∫øt n·ªëi ƒë·ªìng b·ªô
            ChannelFuture f = b.connect(host, port).sync();

            gui.updateLog("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!");

        } catch (Exception e) {
            isConnected = false;
            gui.setConnectionStatus(false);
            gui.updateLog("‚ùå L·ªói k·∫øt n·ªëi: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void sendMessage(String msg) {
        if (channel != null && channel.isActive() && isConnected) {
            channel.writeAndFlush(msg);
            gui.updateLog("üì§ ƒê√£ g·ª≠i tin nh·∫Øn: " + msg);
        } else {
            gui.updateLog("‚ùå Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn - ch∆∞a k·∫øt n·ªëi ƒë·∫øn server");
        }
    }

    public void sendSecureMessage(String rawMessage, String privateKeyPath, String publicKeyPath, String targetDomain) {
        try {
            if (!isConnected || channel == null || !channel.isActive()) {
                gui.updateLog("‚ùå Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn - ch∆∞a k·∫øt n·ªëi ƒë·∫øn server");
                return;
            }

            if (serverPublicKey == null) {
                gui.updateLog("‚ùå Ch∆∞a nh·∫≠n ƒë∆∞·ª£c public key c·ªßa server, kh√¥ng th·ªÉ m√£ h√≥a tin nh·∫Øn!");
                return;
            }

            gui.updateLog("üîê ƒêang chu·∫©n b·ªã g·ª≠i tin nh·∫Øn b·∫£o m·∫≠t (hybrid RSA+AES)...");

            // Ki·ªÉm tra file key
            if (!Files.exists(Paths.get(privateKeyPath))) {
                gui.updateLog("‚ùå Kh√¥ng t√¨m th·∫•y private key: " + privateKeyPath);
                gui.updateLog("üí° Vui l√≤ng sinh key tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn");
                return;
            }

            if (!Files.exists(Paths.get(publicKeyPath))) {
                gui.updateLog("‚ùå Kh√¥ng t√¨m th·∫•y public key: " + publicKeyPath);
                gui.updateLog("üí° Vui l√≤ng sinh key tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn");
                return;
            }

            // Load private key
            gui.updateLog("üìñ ƒêang ƒë·ªçc private key...");
            PrivateKey privateKey = CryptoUtils.loadPrivateKey(privateKeyPath);

            // K√Ω rawMessage
            gui.updateLog("‚úçÔ∏è ƒêang k√Ω tin nh·∫Øn...");
            String signature = CryptoUtils.sign(rawMessage, privateKey);

            // T·∫°o AES key/iv cho m√£ h√≥a message
            gui.updateLog("üîë ƒêang sinh AES key v√† IV cho message...");
            SecretKey aesKey = CryptoUtils.generateAESKey();
            byte[] iv = CryptoUtils.generateIV();

            // Load public key bytes
            gui.updateLog("üìñ ƒêang ƒë·ªçc public key (DER): " + publicKeyPath);
            byte[] pubKeyBytes = Files.readAllBytes(Paths.get(publicKeyPath));

            // M√£ h√≥a public key b·∫±ng AES (cho ph·∫ßn g·ª≠i l√™n server nh∆∞ c≈©)
            gui.updateLog("üîí ƒêang m√£ h√≥a public key...");
            String publicKeyAes = CryptoUtils.encryptPublicKeyWithAES(pubKeyBytes, aesKey, iv);

            // T·∫°o message request (d·ªØ li·ªáu g·ªëc)
            gui.updateLog("üì¶ ƒêang ƒë√≥ng g√≥i tin nh·∫Øn...");
            MessageRequest req = new MessageRequest(
                    rawMessage,
                    signature,
                    publicKeyAes,
                    Base64.getEncoder().encodeToString(aesKey.getEncoded()),
                    Base64.getEncoder().encodeToString(iv),
                    targetDomain
            );

            ObjectMapper mapper = new ObjectMapper();
            String json = mapper.writeValueAsString(req);

            // HYBRID ENCRYPTION: M√£ h√≥a json b·∫±ng AES, m√£ h√≥a AES key/iv b·∫±ng RSA
            gui.updateLog("üîí ƒêang m√£ h√≥a to√†n b·ªô message b·∫±ng AES...");
            String encryptedData = CryptoUtils.encryptMessageWithAES(json, aesKey, iv);

            gui.updateLog("üîí ƒêang m√£ h√≥a AES key v√† IV b·∫±ng public key server (RSA)...");
            String encryptedKey = CryptoUtils.encryptWithPublicKey(aesKey.getEncoded(), serverPublicKey);
            String encryptedIv = CryptoUtils.encryptWithPublicKey(iv, serverPublicKey);

            // ƒê√≥ng g√≥i payload
            gui.updateLog("üì¶ ƒêang ƒë√≥ng g√≥i payload hybrid encryption...");
            java.util.Map<String, String> payload = new java.util.HashMap<>();
            payload.put("encryptedKey", encryptedKey);
            payload.put("encryptedIv", encryptedIv);
            payload.put("encryptedData", encryptedData);

            String payloadJson = mapper.writeValueAsString(payload);

            // G·ª≠i tin nh·∫Øn
            gui.updateLog("üì§ ƒêang g·ª≠i payload hybrid encryption ƒë·∫øn server...");
            sendMessage(payloadJson);

            gui.updateLog("‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn b·∫£o m·∫≠t hybrid th√†nh c√¥ng!");

        } catch (Exception e) {
            gui.updateLog("‚ùå L·ªói g·ª≠i tin nh·∫Øn b·∫£o m·∫≠t: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void disconnect() {
        if (group != null) {
            if (channel != null && channel.isActive()) {
                channel.close();
            }
            group.shutdownGracefully();
            isConnected = false;
            gui.setConnectionStatus(false);
            gui.updateLog("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi kh·ªèi server");
        }
    }

    public boolean isConnected() {
        return isConnected && channel != null && channel.isActive();
    }

    public String getCurrentHost() {
        return currentHost;
    }

    public int getCurrentPort() {
        return currentPort;
    }

    public Channel getChannel() {
        return channel;
    }

    // H√†m gi·∫£i m√£ response m√£ h√≥a
    private String tryDecryptResponse(JsonNode node) {
        try {
            String privateKeyPath = gui.getPrivateKeyPath();
            if (privateKeyPath == null || privateKeyPath.isEmpty()) {
                gui.updateLog("‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng d·∫´n private key ƒë·ªÉ gi·∫£i m√£!");
                return null;
            }
            // Log n·ªôi dung file private key (c·∫Øt ƒë·∫ßu/cu·ªëi)
            try {
                java.nio.file.Path pkPath = java.nio.file.Paths.get(privateKeyPath);
                String pkContent = java.nio.file.Files.readString(pkPath);
                gui.updateLog("[DEBUG] N·ªôi dung private key (ƒë·∫ßu): " + pkContent.substring(0, Math.min(60, pkContent.length())) + "...");
                gui.updateLog("[DEBUG] N·ªôi dung private key (cu·ªëi): " + pkContent.substring(Math.max(0, pkContent.length()-60)));
            } catch (Exception e) {
                gui.updateLog("[DEBUG] Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung file private key: " + e.getMessage());
            }
            String b64Key = node.get("encryptedKey").asText();
            String b64Iv = node.get("encryptedIv").asText();
            String b64Data = node.get("encryptedData").asText();
            gui.updateLog("[DEBUG] encryptedKey (base64, ƒë·∫ßu): " + b64Key.substring(0, Math.min(60, b64Key.length())) + "...");
            gui.updateLog("[DEBUG] encryptedIv (base64, ƒë·∫ßu): " + b64Iv.substring(0, Math.min(60, b64Iv.length())) + "...");
            gui.updateLog("[DEBUG] encryptedData (base64, ƒë·∫ßu): " + b64Data.substring(0, Math.min(60, b64Data.length())) + "...");
            PrivateKey privKey = client.crypto.CryptoUtils.loadPrivateKey(privateKeyPath);
            gui.updateLog("[DEBUG] PrivateKey type: " + privKey.getAlgorithm() + ", format: " + privKey.getFormat() + ", length: " + privKey.getEncoded().length);
            javax.crypto.Cipher rsaCipher = javax.crypto.Cipher.getInstance("RSA/ECB/PKCS1Padding");
            rsaCipher.init(javax.crypto.Cipher.DECRYPT_MODE, privKey);
            byte[] aesKeyBytes = rsaCipher.doFinal(java.util.Base64.getDecoder().decode(b64Key));
            byte[] iv = rsaCipher.doFinal(java.util.Base64.getDecoder().decode(b64Iv));
            gui.updateLog("[DEBUG] AES key length: " + aesKeyBytes.length + ", IV length: " + iv.length);
            javax.crypto.SecretKey aesKey = new javax.crypto.spec.SecretKeySpec(aesKeyBytes, 0, aesKeyBytes.length, "AES");
            javax.crypto.Cipher aesCipher = javax.crypto.Cipher.getInstance("AES/CBC/PKCS5Padding");
            aesCipher.init(javax.crypto.Cipher.DECRYPT_MODE, aesKey, new javax.crypto.spec.IvParameterSpec(iv));
            byte[] decrypted = aesCipher.doFinal(java.util.Base64.getDecoder().decode(b64Data));
            String decryptedStr = new String(decrypted);
            gui.updateLog("[DEBUG] ƒê√£ gi·∫£i m√£ th√†nh c√¥ng, ƒë·ªô d√†i chu·ªói: " + decryptedStr.length());
            return decryptedStr;
        } catch (Exception ex) {
            gui.updateLog("‚ùå L·ªói gi·∫£i m√£ response: " + ex.getMessage());
            java.io.StringWriter sw = new java.io.StringWriter();
            ex.printStackTrace(new java.io.PrintWriter(sw));
            gui.updateLog("[STACKTRACE] " + sw.toString());
            gui.updateLog("[DEBUG] Raw node: " + node.toString());
            return null;
        }
    }
} 